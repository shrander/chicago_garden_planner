name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual deployment

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/chicago-garden-planner:latest
            ghcr.io/${{ github.repository_owner }}/chicago-garden-planner:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/chicago-garden-planner:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository_owner }}/chicago-garden-planner:buildcache,mode=max

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            set -e

            # Navigate to app directory
            cd ${{ secrets.DEPLOY_PATH || '/opt/chicago-garden-planner' }}

            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull latest image
            docker pull ghcr.io/${{ github.repository_owner }}/chicago-garden-planner:latest

            # Stop and remove old containers
            docker-compose down

            # Start new containers
            docker-compose up -d

            # Run migrations
            docker-compose exec -T web python manage.py migrate --noinput

            # Collect static files
            docker-compose exec -T web python manage.py collectstatic --noinput

            # Check if containers are running
            docker-compose ps

            # Show logs
            docker-compose logs --tail=50

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi
