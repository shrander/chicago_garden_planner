# Generated by Django 5.2.4 on 2025-07-10 01:15

import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'That username already exists'}, help_text='Required. 150 characters or fewer. Letters, numbers, and @/./+/-/_ only', max_length=150, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(error_messages={'Email address exists already', 'unique'}, max_length=254, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether user can log into the admin panel', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should treated as activeUnselect this instead of deleting accounts', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, help_text='Tell us about your gardening experience', max_length=500)),
                ('location', models.CharField(blank=True, help_text='City, State', max_length=150)),
                ('gardening_zone', models.CharField(blank=True, default='5b', help_text='USDA Hardiness Zone', max_length=10)),
                ('years_gardening', models.PositiveIntegerField(blank=True, help_text='How many years have you been gardening', null=True)),
                ('organics_only', models.BooleanField(default=False, help_text='Interested only in organic gardening methods')),
                ('interests', models.TextField(blank=True, help_text='What are you most interested in growing?')),
                ('email_notifications', models.BooleanField(default=True, help_text='Receive email notifications about planting reminders')),
                ('weekly_tips', models.BooleanField(default=True, help_text='Receive weekly gardening tips')),
                ('avatar', models.ImageField(blank=True, help_text='Profile Picture', null=True, upload_to='avatars/')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user profile',
                'verbose_name_plural': 'user profiles',
            },
        ),
    ]
