version: '3.8'

services:
  db:
    image: postgres:16-alpine
    container_name: garden_planner_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-garden_planner}
      - POSTGRES_USER=${POSTGRES_USER:-garden_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-garden_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - garden_network

  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: garden_planner_web
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 --workers 3 --timeout 60 --access-logfile - --error-logfile - garden_planner.wsgi:application"
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    environment:
      - DJANGO_SETTINGS_MODULE=garden_planner.settings_production
      - SECRET_KEY=${SECRET_KEY:?SECRET_KEY is required}
      - DEBUG=${DEBUG:-False}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-garden_user}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-garden_planner}
      - POSTGRES_DB=${POSTGRES_DB:-garden_planner}
      - POSTGRES_USER=${POSTGRES_USER:-garden_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - garden_network

  nginx:
    image: nginx:alpine
    container_name: garden_planner_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
      - certbot_conf:/etc/letsencrypt:ro
      - certbot_www:/var/www/certbot:ro
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - garden_network

  certbot:
    image: certbot/certbot
    container_name: garden_planner_certbot
    volumes:
      - certbot_conf:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    restart: unless-stopped

volumes:
  postgres_data:
  static_volume:
  media_volume:
  certbot_conf:
  certbot_www:

networks:
  garden_network:
    driver: bridge
